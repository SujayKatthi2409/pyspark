
 Agenda (PySpark)
 ----------------
   Spark - Basics & Architecture
   Spark Core API Basics
	-> RDD - Transformations & Actions
	-> Spark shared variables
   Spark Submit command
   Spark SQL
	-> DataFrame Operations
	-> Integrations - RDBMS & Hive
   Spark Streaming
	-> Structured Streaming


  Materials
  ---------
	=> PDF Presentations
	=> Code Modules 
	=> Databricks Notebooks
	=> Class Notes
        => Github: https://github.com/ykanakaraju/pyspark


  Spark
  -----

     => Spark is in-memory distributed computing framework for big data analytics.	

	in-memory: ability to persist intermediate results and subsequent operations
		   can directly work on these persisted intermediate results. 

     => Spark is written in Scala programming language
 
     => Spark is polyglot
	-> Support Scala, Java, Python, R

     => Spark can run on multiple cluster managers
	local, spark standalone scheduler, YARN, Mesos, Kubernetes

     => Spark is unified analytics framework


  Spark Unified Framework
  -----------------------

	Spark provides a consistent set of APIs for performing different analytics workloads
        using the same execution engine and some well defined data abstractions and operations.

   	Batch Analytics of unstructured data	-> Spark Core API (low-level api)
	Batch Analytics of structured data 	-> Spark SQL
	Streaming Analytics (real time)		-> Spark Streaming, Structured Streaming
	Predictive analytics (ML)		-> Spark MLLib
	Graph parallel computations  		-> Spark GraphX


   Getting started with Spark
   --------------------------

	1. Setting up local dev environment on your personal machine.

		-> Install Anaconda distribution for Python. 
		   URL: https://www.anaconda.com/download

		-> Follow the instructions given in the shared document 
		   https://github.com/ykanakaraju/pyspark/blob/master/Pyspark-JupyterNotebooks-Windows-Setup.pdf


	* 2. Databricks Community Edition (free edition)
 		
		Signup: https://www.databricks.com/try-databricks

			Screen 1: Fill up the details with valid email address
			Screen 2: Click on "Get started with Community Edition" link (Not the 'Continue' button)

		Login: https://community.cloud.databricks.com/login.html

		Downloading a file from Databricks
		----------------------------------
		/FileStore/<FILEPATH>
		https://community.cloud.databricks.com/files/<FILEPATH>?o=4949609693130439

		Example:
		file path to be downloaded: dbfs:/FileStore/ctsdatasets/output/wc/part-00000
		https://community.cloud.databricks.com/files/ctsdatasets/output/wc/part-00000?o=1072576993312365


		Enabling DBFS File browser
		--------------------------
		<your account (top-right)> 
			-> Admin settings 
				-> workspace settings 
					-> Advanced -> DBFS File Browser (enable it)
					               (Refresh your browser)
		

   Spark Architecture
   ------------------

	1. Cluster Manager (CM)
		-> Applications are submitted to CMs
		-> Allocates containers for lauching driver and executors on the cluster. 
		-> Spark supports multiple CMs
			-> local, standalone, YARN, Mesos, Kubernetes		

	2. Driver
		-> Master process
		-> Runs the 'SparkContext' object
		-> Manages the user code and sends the tasks to the executors as per the code. 

		Deploy Modes:
		-> Where to run the driver process
		1. Client : default, driver runs on the client. 
		2. Cluster: driver runs on one of the nodes on the cluster.

	3. SparkContext
		-> Is an application context
		-> Starting point of execution
		-> Is the link between the driver and tasks running on the executors

	4. Executors
		-> receives the tasks from the Driver
		-> all tasks run the same execution code but on different partitions of the data
		-> the status of tasks are reported to the driver. 



   RDD (Resilient Distributed Dataset)
   -----------------------------------

	-> RDD is the fundamental data abstraction of Spark

	-> RDD is a collection of distributed in-memory partitions.
	    -> Each partition is a collection of objects of some type.

	-> RDDs are immutable

	-> RDDs are lazily evaluated
	   -> Transformations does not cause execution.
	   -> Action commands trigger execution.


  Creating RDDs
  -------------

	Three ways:

	1. Creating an RDD from some external dataset
		rddFile = sc.textFile("E:\\Spark\\wordcount.txt", 4)

	2. Create an RDD from some pragrammatic data
		rdd1 = sc.parallelize([4,3,2,1,2,3,2,3,5,4,6,5,7,6,8,9,0,9,8,7,8,6,1,3,2,1,3,2], 3)

	3. By applying transformations on existing RDDs
		rddWords = rddFile.flatMap(lambda x: x.split())


  RDD Operations
  --------------
    Two types of operations

	1. Transformations
		-> Transformations return RDDs
		-> Transformations does not cause execution of RDDs
		-> Cause lineage DAGs to be created

	2. Actions
		-> Triggers execution of RDDs
		-> Produces output by sending a Job to the cluster


  RDD Lineage DAG
  ---------------
  Driver maintains a Lineage DAG for every RDD
  Lineage DAG is a heirarchy of dependencies of RDDs all the way starting from the very first RDD	
  Lineage DAG is a logical plan on how to compute the partitions of the RDD.


	rddFile = sc.textFile("E:\\Spark\\wordcount.txt", 4)
		Lineage of rddFile -> (4) rddFile -> sc.textFile on "E:\\Spark\\wordcount.txt"

	rddWords = rddFile.flatMap(lambda x: x.split())
		Lineage of rddWords -> (4) rddWords -> rddFile.flatMap -> sc.textFile on "E:\\Spark\\wordcount.txt"
	
	rddPairs = rddWords.map(lambda x: (x, 1))
		Lineage of rddWords -> (4) rddPairs -> rddWords.map -> rddFile.flatMap -> sc.textFile

	rddWc = rddPairs.reduceByKey(lambda x, y: x + y)
		Lineage of rddWords -> (4) rddWc -> rddPairs.reduceByKey -> rddWords.map -> rddFile.flatMap -> sc.textFile


  RDD DAG Scheduling
  ------------------
	Application  (represented by a Spark context)
	|
	|=> Jobs (each action command launches a job)
	     |
	     |=> Stages (each wide transformations causes a new stage)
		  |
		  |=> Tasks (set transformations that can run in parallel)
			|
			|=> Transformations

  RDD persistence
  ---------------
	rdd1 = sc.textFile(<dataPath>, 4)
	rdd2 = rdd1.t2(...)
	rdd3 = rdd1.t3(...)
	rdd4 = rdd3.t4(...)
	rdd5 = rdd3.t5(...)
	rdd6 = rdd5.t6(...)
	rdd6.persist( StorageLevel.MEMORY_AND_DISK ) --> is an instruction to spark to save rdd6 partitions
	rdd7 = rdd6.t7(...)

	rdd6.collect()
	Lineage DAG of rdd6 : (4)  rdd6 -> rdd5.t6 -> rdd3.t5 -> rdd1.t3 -> sc.textFile
		tasks [sc.textFile, t3, t5, t6]

	rdd7.collect()
	Lineage DAG of rdd6 : (4)  rdd7 -> rdd6.t7 
		tasks [t7]

	rdd6.unpersist()


	Storage Levels
        --------------
	MEMORY_ONLY		=> default, Memory Serialized 1x replicated
	MEMORY_AND_DISK		=> Disk Memory Serialized 1x replicated
	DISK_ONLY		=> Disk Serialized 1x replicated
	MEMORY_ONLY_2		=> Memory Serialized 2x replicated	
	MEMORY_AND_DISK_2	=> Disk Memory Serialized 2x replicated	


	Commands
	--------	
	rdd1.cache()     -> in-memory persistence
	rdd1.persist()	 -> in-memory persistence
	rdd1.persist( StorageLevel.DISK_ONLY )

	rdd1.unpersist()


   Spark Executor Memory Structure
   -------------------------------     
      Let us say we are requesting an executor with 10 GB RAM. 
      The spark job will be allocated executors with 10.3 GB (10GB + 300MB) RAM. 
     
      
      1. Reserved Memory (300 MB)
           -> Spark's internal usage
      
      2. Spark Memory (spark.memory.fraction: 0.6)   => 6 GB (Unified Memory)
          
         2.1  Execution Memory
                 -> Used for RDD partition creation and transformation
                 -> Can forcibly evict RDD partitions from storage memory if it requires
                    additional memory upto the quota allocated for it.

         2.2  Storage Memory (spark.memory.storageFraction: 0.5) => 3 GB
                 -> The RDD partitions and broadcast variables are persisted
                    in this memory.

      3. User Memory  => 4 GB
         -> Running non-spark related code execution. 
         -> Related to running python methods, storing python collection.
	


  Types of RDD Transformation
  ---------------------------

    Two types:

	 1. Narrow Transformations
           -> Narrow transformations are those, where the computation of each partition depends ONLY
              on its input partition.
           -> There is no shuffling of data.
           -> Simple and efficient

      	2. Wide Transformations
           -> In wide transformations, the computation of a single partition depends on many
              partitions of its input RDD.
           -> Data shuffle across partitions will happen.
           -> Complex and expensive


  RDD Transformations
  -------------------

  1. map		P: U -> V
			Object to object transformation
			Input RDD: N objects, Output RDD: N objects					

  		rdd2 = rddFile.map(lambda x : x.split())

   

  2. filter		P: U -> Boolean
			Filters the objects based on the function
			Input RDD: N objects, Output RDD: <= N objects	

		rddFile.filter(lambda x: len(x.split()) > 8 ).collect()


  3. glom		P: None
			Return one list object per partition with all the objects of the partition

		rdd1	    rdd2 = rdd1.glom()

		P0: 3,4,2,4,6 -> glom -> P0: [3,4,2,4,6]
		P1: 4,6,7,8,6 -> glom -> P1: [4,6,7,8,6]
		P2: 5,0,7,9,1 -> glom -> P2: [5,0,7,9,1]

	    rdd1.count() = 15 (int)   rdd2.count() = 3 (list)


  4. flatMap		P: U -> Iterable[V]
			flattens the iterables generated by the function
 			Input RDD: N objects, Output RDD: >= N objects	

		rddWords = rddFile.flatMap(lambda x: x.split())


  5. mapPartitions	P: Iterable[U] -> Iterable[V]
			partition to partition transformation

		rdd1.mapPartitions(lambda p: map(lambda x: x*10, p) ).collect()
		rdd1.mapPartitions(lambda p: [sum(p)] ).collect()


  Types of RDDs
  -------------
	Generic RDDs: RDD[U]            
	Pair RDD: RDD[(K, V)]


  6. mapValues		P: U => V
			Applied only on Pair RDD
			Applies the function only to the 'value' part of the key-value pairs

		rddPairs.mapValues(lambda x: x*10).collect()
		-> In the above fn, x represents only the 'value' part of key-value pairs


  7. distinct		P: None, Optional: numPartitions
			Returns distinct objects of the RDD.

			rddWords.distinct().collect()



  8. sortBy		P: U -> V, Optional: ascending (True/False), numPartitions
			Sorts the RDDs based on the function output.

		rdd1.sortBy(lambda x: x%3).glom().collect()
		rdd1.sortBy(lambda x: x%3, False).glom().collect()
		rdd1.sortBy(lambda x: x%3, True, 2).glom().collect()	 


  9. groupBy		P: U -> V, Optional: numPartitions

			Returns a Pair-RDD where:
			    key: Each unique value of the function output
		            value: ResultIterable. Grouped objects of the RDD that produced the key 
  


 10. partitionBy	P: numPartitions, Optional: partition-function (default: hash)
			Applied only on Pair RDDs
			Controls which keys go to which partition based on partition-function applied to keys.
           

  		rdd4 = rdd1.map(lambda x: (x, 1)).partitionBy(3).map(lambda x: x[0])


  ..ByKey Transformations
  -----------------------
	=> Are wide transformations
	=> Applied on Pair RDDs only


  11. sortByKey		P: None, Optional: ascending (True/False), numPartitions
			Sorts the data based on the keys.

			rddPairs.sortByKey().glom().collect()
			rddPairs.sortByKey(False).glom().collect()
			rddPairs.sortByKey(False, 3).glom().collect()	



  12. groupByKey	P: None, Optional: numPartitions
			Returns a Pair RDD where:
				key: Unique keys of the RDD
				value: ResultIterable. Grouped values

			CAUTION: avoid groupByKey if possible. 

		rddWc = sc.textFile("E:\\Spark\\wordcount.txt", 1) \
        		.flatMap(lambda x: x.split()) \
        		.map(lambda x: (x, 1)) \
        		.groupByKey() \
        		.mapValues(sum) \
        		.sortBy(lambda x: x[1], False)


  13. reduceByKey	P: (U, U) -> U,  Optional: numPartitions
			Reduce all the values of each unique key by iterativly applying the reduce function.
			
		rddWc = sc.textFile("E:\\Spark\\wordcount.txt", 1) \
        		.flatMap(lambda x: x.split()) \
        		.map(lambda x: (x, 1)) \
        		.reduceByKey(lambda x, y: x + y) \
        		.sortBy(lambda x: x[1], False)


  14. repartition	P: numPartitions
			Is used to increase or decrease the number of output partitions	
			Global shuffle	
			
		rdd2 = rdd1.repartition(5)


  15. coalesce		P: numPartitions
			Is used to only decrease the number of output partitions	
			Partition merging


		rdd2 = rdd1.coalesce(5)

		Recommendations
		---------------
		-> The size of each partition should be between 100 MB to 1 GB
		   (Ideally 128 MB if you are running on Hadoop)
		-> The number of partitions should be a multiple of number of cores
		-> The number of cores per executor should be 5


  RDD Actions
  -----------

  1. collect

  2. count

  3. saveAsTextFile

  4. reduce		P: (U, U) -> U
			Reduces an entire RDD to one object by iterativly applying the function first, on
			each partition and then, across the reduced values of all partitions. 	
		
		rdd1									
	     	P0: 1, 2, 4, 3, 5, 7  -> reduce -> 22  -> reduce -> 86
		P1: 9, 8, 7, 9, 7, 9  -> reduce -> 49
		P2: 1, 3, 2, 1, 3, 5  -> reduce -> 15 

		rdd1.reduce(lambda x, y: x + y)

			
  5. take(n)

		rdd1.take(10)  -> returns a list of first 10 objects


  6. takeOrdered(n, [fn])

		rddWords.takeOrdered(20)
		rddWords.takeOrdered(20, len)

  7. takeSample(withReplacement, n, [seed])

		with-replacement sampling
			rdd1.takeSample(True, 10)
			rdd1.takeSample(True, 10, 45645)    # 45645 is a seed

		without-replacement sampling
			rdd1.takeSample(False, 10)
			rdd1.takeSample(False, 10, 45645)   # 45645 is a seed

  8. countByValue


  9. countByKey


  10. foreach => P: function;
		  Returns nothing. 
		  Executes the function on all objects of the RDD.


  11. saveAsSequenceFile

	rddWc.saveAsSequenceFile("/FileStore/output/seq")



   Case Study
   ----------
		
	dataset: https://github.com/ykanakaraju/pyspark/blob/master/data_git/cars.tsv

	From cars.tsv dataset, get the average weight of all the models of each make of American origin cars. 
	-> Arrange in the DESC order of average weight. 
        -> Save the output as a single text file. 



  Spark Closure
  -------------

   	In Spark, a closure constitutes all the variables and methods (code) which must be visible 
	for the executor to perform its computations on the RDD. 

	-> This closure is serialized and a separate sent to each executor.


	c = 0 

	def isPrime(n):
	   return True if n is Prime
	   return False if n is not Prime 

	def f1(n):
	   global c
	   if ( isPrime(n) ) c += 1
	   return n*2

	rdd1 = sc.parallelize( range(1, 4001), 4 )
	rdd2 = rdd1.map(f1)

	rdd2.collect()

	print(c)    // 0

	Limitation: Local variables can not be used to implement global counters. 
	Solution: Use "Accumulator" variable. 
	

  Shared variables
  ----------------
   
   1. Accumulator Variable

	-> Is a shared variable, not part of a closure
	-> Not a local copy
	-> One variable maintained by the driver
	-> All tasks can add to this variable (the driver copy is updated)
	-> Is used to implement "global counter"

	c = sc.accumulator(0)

	def isPrime(n):
	   return True if n is Prime
	   return False if n is not Prime 

	def f1(n):
	   global c
	   if ( isPrime(n) ) c.add(1)
	   return n*2

	rdd1 = sc.parallelize( range(1, 4001), 4 )
	rdd2 = rdd1.map(f1)

	rdd2.collect()

	print(c)    // 210



  2. Broadcast Variable

	-> Is a shared variable that is not part of the closure
	-> Variable is broadcasted to each executor node.
	-> All tasks in that executor can read from that copy.	

	d = sc.broadcast({1: a, 2: b, 3: c, 4: d, 5: e, 6: f, 7: g, .....})     # 100 MB

	def f1(k):
	   global d
	   return d.value[k]
	
        rdd1 = sc.parallelize( range(1, 4001), 4 )
	rdd2 = rdd1.map(f1)

	rdd2.collect()    
	

















	
  
 


